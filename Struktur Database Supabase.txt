 -- Struktur Database Supabase

-- 1. Tabel Profiles (untuk menyimpan data pengguna)
CREATE TABLE profiles (
  id UUID PRIMARY KEY,
  username TEXT UNIQUE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Tabel Game Progress (untuk menyimpan progress game)
CREATE TABLE game_progress (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  game_type TEXT NOT NULL,
  progress_data JSONB DEFAULT '{}'::jsonb,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE (user_id, game_type)
);

-- 3. Tabel High Scores (untuk menyimpan skor tertinggi)
CREATE TABLE high_scores (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  game_type TEXT NOT NULL,
  score INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE (user_id, game_type)
);

-- 4. Tabel Achievements (untuk menyimpan daftar achievement yang tersedia)
CREATE TABLE achievements (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  game_type TEXT NOT NULL,
  criteria_type TEXT NOT NULL,
  criteria_value INTEGER NOT NULL,
  icon TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. Tabel User Achievements (untuk menyimpan achievement yang diperoleh user)
CREATE TABLE user_achievements (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  achievement_id UUID NOT NULL REFERENCES achievements(id) ON DELETE CASCADE,
  achieved_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE (user_id, achievement_id)
);

-- Contoh Data untuk Tabel Achievements

-- Achievements untuk Clicker Game
INSERT INTO achievements (name, description, game_type, criteria_type, criteria_value, icon) VALUES
('Pemula Klik', 'Mencapai 100 klik', 'clicker', 'clicks', 100, 'click_beginner'),
('Penggila Klik', 'Mencapai 1,000 klik', 'clicker', 'clicks', 1000, 'click_addict'),
('Master Klik', 'Mencapai 10,000 klik', 'clicker', 'clicks', 10000, 'click_master'),
('Level 5', 'Mencapai level 5', 'clicker', 'level', 5, 'level_5'),
('Level 10', 'Mencapai level 10', 'clicker', 'level', 10, 'level_10'),
('Level 25', 'Mencapai level 25', 'clicker', 'level', 25, 'level_25');

-- Achievements untuk Quiz Game
INSERT INTO achievements (name, description, game_type, criteria_type, criteria_value, icon) VALUES
('Starter Quiz', 'Menyelesaikan 1 quiz', 'quiz', 'quizzes_completed', 1, 'quiz_starter'),
('Quiz Enthusiast', 'Menyelesaikan 5 quiz', 'quiz', 'quizzes_completed', 5, 'quiz_enthusiast'),
('Quiz Master', 'Menyelesaikan semua quiz', 'quiz', 'quizzes_completed', 10, 'quiz_master'),
('Skor 100', 'Mendapatkan skor 100 dalam satu quiz', 'quiz', 'quiz_score', 100, 'perfect_score'),
('Skor 500', 'Mencapai total skor 500', 'quiz', 'quiz_score', 500, 'high_score_500'),
('Skor 1000', 'Mencapai total skor 1000', 'quiz', 'quiz_score', 1000, 'high_score_1000');

-- Untuk membuat Row Level Security (RLS) agar data aman
-- Policies untuk tabel profiles
CREATE POLICY "Profiles dapat dilihat oleh semua user" ON profiles
  FOR SELECT USING (true);

CREATE POLICY "Users dapat mengupdate profile mereka sendiri" ON profiles
  FOR UPDATE USING (auth.uid() = id);

-- Policies untuk tabel game_progress
CREATE POLICY "Users dapat membaca progress mereka sendiri" ON game_progress
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users dapat mengupdate progress mereka sendiri" ON game_progress
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users dapat mengupdate progress mereka sendiri" ON game_progress
  FOR UPDATE USING (auth.uid() = user_id);

-- Policies untuk tabel high_scores
CREATE POLICY "High scores dapat dilihat oleh semua user" ON high_scores
  FOR SELECT USING (true);

CREATE POLICY "Users dapat mengupdate skor mereka sendiri" ON high_scores
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users dapat mengupdate skor mereka sendiri" ON high_scores
  FOR UPDATE USING (auth.uid() = user_id);

-- Policies untuk tabel achievements
CREATE POLICY "Achievements dapat dilihat oleh semua user" ON achievements
  FOR SELECT USING (true);

-- Policies untuk tabel user_achievements
CREATE POLICY "Users dapat melihat achievements mereka sendiri" ON user_achievements
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users dapat menambah achievements mereka sendiri" ON user_achievements
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Catatan: Login dengan username saja perlu modifikasi khusus karena
-- Supabase biasanya mengandalkan email/password.
-- Untuk implementasi username-only, kita menggunakan tabel profiles
-- dan menyimpan sesi di sessionStorage atau localStorage.